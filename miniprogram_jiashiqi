
/**index.wxss**/
.hmd{height: 100rpx;
  font-size:20px;
  font-weight:bold;
  color:#6495ED;
}
.level{height: 100rpx;
  font-size:20px;
  font-weight:bold;
  color:#6495ED;
}
.control{
  font-size:20px;
  font-weight:bold;
  color:#6495ED;
}
<view class="hmd">
<text>湿度：</text>
<text>{{humid}}%</text>
</view>

<view class="level">
<text>水位：</text>
<text>{{water}}mm</text>
</view>//app.js
App({
  onLaunch: function () {
    // 展示本地存储能力
    var logs = wx.getStorageSync('logs') || []
    logs.unshift(Date.now())
    wx.setStorageSync('logs', logs)

    // 登录
    wx.login({
      success: res => {
        // 发送 res.code 到后台换取 openId, sessionKey, unionId
      }
    })
    // 获取用户信息
    wx.getSetting({
      success: res => {
        if (res.authSetting['scope.userInfo']) {
          // 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框
          wx.getUserInfo({
            success: res => {
              // 可以将 res 发送给后台解码出 unionId
              this.globalData.userInfo = res.userInfo

              // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回
              // 所以此处加入 callback 以防止这种情况
              if (this.userInfoReadyCallback) {
                this.userInfoReadyCallback(res)
              }
            }
          })
        }
      }
    })
  },
  globalData: {
    userInfo: null
  }
})
{
  "pages":[  "pages/index/index"
    
  ],
  "window":{
    "backgroundTextStyle":"dark",
    "navigationBarBackgroundColor": "#5F9EA0",
    "navigationBarTitleText": "懒狗智能加湿器",
    "navigationBarTextStyle":"white",
   "enablePullDownRefresh":true,
   "backgroundColor": "#B0C4DE"

  },
  "style": "v2",
  "sitemapLocation": "sitemap.json"
} 
const formatTime = date => {
  const year = date.getFullYear()
  const month = date.getMonth() + 1
  const day = date.getDate()
  const hour = date.getHours()
  const minute = date.getMinutes()
  const second = date.getSeconds()

  return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':')
}

const formatNumber = n => {
  n = n.toString()
  return n[1] ? n : '0' + n
}

module.exports = {
  formatTime: formatTime
}
# Windows
[Dd]esktop.ini
Thumbs.db
$RECYCLE.BIN/

# macOS
.DS_Store
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes

# Node.js
node_modules/
/**app.wxss**/
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  padding: 200rpx 0;
  box-sizing: border-box;
} 
{
  "description": "项目配置文件",
  "packOptions": {
    "ignore": []
  },
  "setting": {
    "urlCheck": true,
    "es6": true,
    "enhance": false,
    "postcss": true,
    "preloadBackgroundData": false,
    "minified": true,
    "newFeature": false,
    "coverView": true,
    "nodeModules": false,
    "autoAudits": false,
    "showShadowRootInWxmlPanel": true,
    "scopeDataCheck": false,
    "uglifyFileName": false,
    "checkInvalidKey": true,
    "checkSiteMap": true,
    "uploadWithSourceMap": true,
    "compileHotReLoad": false,
    "useMultiFrameRuntime": false,
    "useApiHook": true,
    "babelSetting": {
      "ignore": [],
      "disablePlugins": [],
      "outputPath": ""
    },
    "useIsolateContext": true,
    "useCompilerModule": true,
    "userConfirmedUseCompilerModuleSwitch": false,
    "packNpmManually": false,
    "packNpmRelationList": []
  },
  "compileType": "miniprogram",
  "libVersion": "2.14.1",
  "appid": "wxeeeb1b549d82e739",
  "projectname": "%E5%8A%A0%E6%B9%BF%E5%99%A8",
  "debugOptions": {
    "hidedInDevtools": []
  },
  "scripts": {},
  "isGameTourist": false,
  "simulatorType": "wechat",
  "simulatorPluginLibVersion": {},
  "condition": {
    "search": {
      "current": -1,
      "list": []
    },
    "conversation": {
      "current": -1,
      "list": []
    },
    "game": {
      "current": -1,
      "list": []
    },
    "plugin": {
      "current": -1,
      "list": []
    },
    "gamePlugin": {
      "current": -1,
      "list": []
    },
    "miniprogram": {
      "current": -1,
      "list": []
    }
  }
}
const devicesId = “644659810”
const api_key = “cU=P6z=OVZZAJBWPb2lCyqx6u7s=”
Page({
 
 
onLoad: function () {
console.log(`your deviceId: ${devicesId}, apiKey: ${api_key}`)
 
this.getDatapoints().then((datapoints) => {
wx.hideLoading()
this.firstDraw(datapoints)
}).catch((err) => {
wx.hideLoading()
console.error(err)
clearInterval(timer) 
})
},
  /**
   * 向OneNet请求当前设备的数据点
   * @returns Promise
   */
getDatapoints: function () {
returnnewPromise((resolve, reject) => {
wx.request({
url: `https://api.heclouds.com/devices/${devicesId}/datapoints?datastream_id=Temperature,Humidity&limit=20`,
        /**
         * 添加HTTP报文的请求头,
         * 其中api-key为OneNet的api文档要求我们添加的鉴权秘钥
         * Content-Type的作用是标识请求体的格式, 从api文档中我们读到请求体是json格式的
         * 故content-type属性应设置为application/json
         */
header: {
‘content-type’: ‘application/json’,
‘api-key’: api_key
},
success: (res) => {
const status = res.statusCode
const response = res.data
if (status !== 200) { // 返回状态码不为200时将Promise置为reject状态
reject(res.data)
return;
}
if (response.errno !== 0) { //errno不为零说明可能参数有误, 将Promise置为reject
reject(response.error)
return;
}
if (response.data.datastreams.length === 0) {
reject(“当前设备无数据, 请先运行硬件实验”)
}
//程序可以运行到这里说明请求成功, 将Promise置为resolve状态
resolve({
temperature: response.data.datastreams[0].datapoints.reverse(),
humidity: response.data.datastreams[1].datapoints.reverse()
})
},
fail: (err) => {
reject(err)
}
})
})
},
  /**
   * @param {Object[]} datapoints 从OneNet云平台上获取到的数据点
   * 传入获取到的数据点, 函数自动更新图标
   */
update: function (datapoints) {
const wheatherData = this.convert(datapoints);
this.lineChart_hum.updateData({
categories: wheatherData.categories,
series: [{
name: ‘humidity’,
data: wheatherData.humidity,
format: (val, name) => val.toFixed(2)
}],
})
this.lineChart_tempe.updateData({
categories: wheatherData.categories,
series: [{
name: ‘tempe’,
data: wheatherData.tempe,
format: (val, name) => val.toFixed(2)
}],
})
},
  /**
   *
   * @param {Object[]} datapoints 从OneNet云平台上获取到的数据点
   * 传入数据点, 返回使用于图表的数据格式
   */
convert: function (datapoints) {
var categories = [];
var humidity = [];
var tempe = [];
var length = datapoints.humidity.length
for (var i = 0; i < length; i++) {
categories.push(datapoints.humidity[i].at.slice(5, 19));
humidity.push(datapoints.humidity[i].value);
tempe.push(datapoints.temperature[i].value);
}
return {
categories: categories,
humidity: humidity,
tempe: tempe
}
},
  /**
   *
   * @param {Object[]} datapoints 从OneNet云平台上获取到的数据点
   */
firstDraw: function (datapoints) {
var windowWidth = 320;
try {
var res = wx.getSystemInfoSync();
windowWidth = res.windowWidth;
} catch (e) {
console.error(‘getSystemInfoSync failed!’);
}
var wheatherData = this.convert(datapoints);
console.log(wheatherData.humidity[0]);
var t = wheatherData.humidity[0];
console.log(t);
},
})
